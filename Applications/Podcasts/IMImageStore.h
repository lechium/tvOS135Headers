//
//     Generated by classdumpios 1.0.1 (64 bit) (iOS port by DreamDevLost)(Debug version compiled Jun 10 2020 10:03:13).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

#import "IMCache-Protocol.h"

@class IMImageDiskCache, IMMemoryCache, NSOperationQueue, NSString;

@interface IMImageStore : NSObject <IMCache>
{
    CDUnknownBlockType _alternativeSize;	// 8 = 0x8
    NSString *_name;	// 16 = 0x10
    NSOperationQueue *_fetchOperationQueue;	// 24 = 0x18
    double _maxImageDimensionInPixels;	// 32 = 0x20
    IMMemoryCache *_memoryCache;	// 40 = 0x28
    IMImageDiskCache *_diskCache;	// 48 = 0x30
}

+ (unsigned long long)_memorySize;	// IMP=0x00000001001dc0a8
+ (CDUnknownBlockType)defaultAlternativeSizeBlock;	// IMP=0x00000001001d909c
+ (unsigned long long)defaultMaxConcurrentOperations;	// IMP=0x00000001001d9094
+ (int)defaultImageResizeOptions;	// IMP=0x00000001001d908c
+ (double)defaultMaxImageDimensionInPixels;	// IMP=0x00000001001d9080
+ (id)defaultBasePath;	// IMP=0x00000001001d906c
+ (id)defaultName;	// IMP=0x00000001001d9060
+ (id)defaultStore;	// IMP=0x00000001001d8fc4
- (void).cxx_destruct;	// IMP=0x00000001001dc9a4
@property(readonly, nonatomic) IMImageDiskCache *diskCache; // @synthesize diskCache=_diskCache;
@property(readonly, nonatomic) IMMemoryCache *memoryCache; // @synthesize memoryCache=_memoryCache;
@property(nonatomic) double maxImageDimensionInPixels; // @synthesize maxImageDimensionInPixels=_maxImageDimensionInPixels;
@property(retain, nonatomic) NSOperationQueue *fetchOperationQueue; // @synthesize fetchOperationQueue=_fetchOperationQueue;
@property(copy, nonatomic) NSString *name; // @synthesize name=_name;
@property(copy, nonatomic) CDUnknownBlockType alternativeSize; // @synthesize alternativeSize=_alternativeSize;
- (void)performWhenURLAvailableForImageForKey:(id)arg1 block:(CDUnknownBlockType)arg2;	// IMP=0x00000001001dc678
- (id)_loadDiskCacheImageForKey:(id)arg1 expectImageExists:(_Bool)arg2;	// IMP=0x00000001001dc4d0
- (void)_addImage:(id)arg1 toMemoryCacheWithKey:(id)arg2;	// IMP=0x00000001001dc3fc
- (void)memoryWarning;	// IMP=0x00000001001dc3bc
- (id)_keyForSize:(struct CGSize)arg1 baseKey:(id)arg2 modifier:(id)arg3;	// IMP=0x00000001001dc0e4
- (id)_keyForSize:(struct CGSize)arg1 baseKey:(id)arg2;	// IMP=0x00000001001dc0d4
- (_Bool)isEmpty;	// IMP=0x00000001001dc05c
- (void)removeItemForKey:(id)arg1;	// IMP=0x00000001001dbfbc
- (void)removeItemsWithPrefx:(id)arg1;	// IMP=0x00000001001dbf10
- (_Bool)hasItemForKey:(id)arg1;	// IMP=0x00000001001dbe28
- (_Bool)hasItemForKey:(id)arg1 size:(struct CGSize)arg2 modifier:(id)arg3;	// IMP=0x00000001001dbcd8
- (_Bool)hasItemForKey:(id)arg1 size:(struct CGSize)arg2;	// IMP=0x00000001001dbcc8
- (void)clearCache;	// IMP=0x00000001001dbc54
- (void)asyncImageURLForKey:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;	// IMP=0x00000001001dba04
- (void)asyncImageURLForKey:(id)arg1 squareDimension:(double)arg2 cacheKeyModifier:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;	// IMP=0x00000001001db3b0
- (void)asyncImageForKey:(id)arg1 squareDimension:(double)arg2 cacheKeyModifier:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;	// IMP=0x00000001001db20c
- (void)asyncImageForKey:(id)arg1 size:(struct CGSize)arg2 resizeOptions:(int)arg3 modifier:(id)arg4 completionHandler:(CDUnknownBlockType)arg5;	// IMP=0x00000001001daf44
- (void)asyncImageForKey:(id)arg1 size:(struct CGSize)arg2 modifier:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;	// IMP=0x00000001001dae94
- (void)asyncImageForKey:(id)arg1 size:(struct CGSize)arg2 resizeOptions:(int)arg3 completionHandler:(CDUnknownBlockType)arg4;	// IMP=0x00000001001dae20
- (void)asyncImageForKey:(id)arg1 size:(struct CGSize)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x00000001001dad88
- (void)asyncImageForKey:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;	// IMP=0x00000001001dab1c
- (id)imageUrlForKey:(id)arg1;	// IMP=0x00000001001daa9c
- (id)imageInMemoryForKey:(id)arg1 size:(struct CGSize)arg2 modifier:(id)arg3;	// IMP=0x00000001001da8b4
- (id)imageInMemoryForKey:(id)arg1 size:(struct CGSize)arg2;	// IMP=0x00000001001da8a4
- (id)_performImagingTransactionNamed:(id)arg1 block:(CDUnknownBlockType)arg2;	// IMP=0x00000001001da7ec
- (id)_createScaledImageFromSourceKey:(id)arg1 newImageKey:(id)arg2 size:(struct CGSize)arg3 resizeOptions:(int)arg4;	// IMP=0x00000001001da528
- (id)_createModifiedImageFromSourceKey:(id)arg1 newImageKey:(id)arg2 modifier:(id)arg3 size:(struct CGSize)arg4 resizeOptions:(int)arg5;	// IMP=0x00000001001da360
- (id)imageForKey:(id)arg1 size:(struct CGSize)arg2 resizeOptions:(int)arg3 modifier:(id)arg4;	// IMP=0x00000001001da06c
- (id)imageForKey:(id)arg1 size:(struct CGSize)arg2 modifier:(id)arg3;	// IMP=0x00000001001d9fe4
- (id)imageForKey:(id)arg1 size:(struct CGSize)arg2 resizeOptions:(int)arg3;	// IMP=0x00000001001d9fd4
- (id)imageForKey:(id)arg1 size:(struct CGSize)arg2;	// IMP=0x00000001001d9f50
- (id)imageForKey:(id)arg1;	// IMP=0x00000001001d9e94
- (void)addImagesWithSourceUrl:(id)arg1 forKeys:(id)arg2 removeOldItems:(_Bool)arg3 discardTransparency:(_Bool)arg4 completion:(CDUnknownBlockType)arg5;	// IMP=0x00000001001d9918
- (void)addImage:(id)arg1 forKey:(id)arg2 persist:(_Bool)arg3 discardTransparency:(_Bool)arg4;	// IMP=0x00000001001d97f8
- (void)addImage:(id)arg1 forKey:(id)arg2 persist:(_Bool)arg3;	// IMP=0x00000001001d979c
- (void)addImage:(id)arg1 forKey:(id)arg2;	// IMP=0x00000001001d9748
- (id)fullName;	// IMP=0x00000001001d96d4
@property(nonatomic) _Bool disableMemoryCache;
- (void)configureMemoryCache;	// IMP=0x00000001001d9504
- (_Bool)requireSquareImages;	// IMP=0x00000001001d94fc
- (id)initWithName:(id)arg1 basePath:(id)arg2 maxImageDimensionInPixels:(double)arg3 maxConcurrentOperations:(unsigned long long)arg4 alternativeSizeBlock:(CDUnknownBlockType)arg5;	// IMP=0x00000001001d91fc
- (id)initWithName:(id)arg1;	// IMP=0x00000001001d9108
- (id)init;	// IMP=0x00000001001d90ac

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

