//
//     Generated by classdumpios 1.0.1 (64 bit) (iOS port by DreamDevLost)(Debug version compiled Jun 10 2020 10:03:13).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

#import "NSUserActivityDelegate-Protocol.h"

@class IMAVPlayer, MPCPlayerPath, MTCompositeManifest, MTPlayerManifest, MTSetPlaybackQueueRequest, MTUpNextManifest, NSMutableSet, NSString, NSTimer, NSURL, NSUserActivity;
@protocol OS_dispatch_queue, OS_dispatch_semaphore;

@interface MTPlayerController : NSObject <NSUserActivityDelegate>
{
    _Bool _hasReportedThisEpisode;	// 8 = 0x8
    _Bool _shouldFindSomethingToPlay;	// 9 = 0x9
    _Bool _playerManifestRestored;	// 10 = 0xa
    IMAVPlayer *_player;	// 16 = 0x10
    MPCPlayerPath *_playerPath;	// 24 = 0x18
    MTCompositeManifest *_compositeManifest;	// 32 = 0x20
    MTUpNextManifest *_upNextManifest;	// 40 = 0x28
    MTPlayerManifest *_userManifest;	// 48 = 0x30
    double _currentTimse;	// 56 = 0x38
    CDUnknownBlockType _platformSyncPlayheadChangeObserverBlock;	// 64 = 0x40
    NSString *_previousPlayingEpisodeUuid;	// 72 = 0x48
    double _lastPlaybackSaveTime;	// 80 = 0x50
    long long _metricsPlayStartTime;	// 88 = 0x58
    double _metricsPlayStartPosition;	// 96 = 0x60
    NSUserActivity *_currentActivity;	// 104 = 0x68
    NSObject<OS_dispatch_queue> *_restorationQueue;	// 112 = 0x70
    NSObject<OS_dispatch_semaphore> *_restorationSemaphore;	// 120 = 0x78
    MTSetPlaybackQueueRequest *_pendingSetPlaybackQueueRequest;	// 128 = 0x80
    NSTimer *_setPlaybackQueueRequestTimeoutTimer;	// 136 = 0x88
    NSMutableSet *_recordedPlayEventsForCurrentItem;	// 144 = 0x90
    NSURL *_lastRecordedItemURL;	// 152 = 0x98
}

+ (void)setSharedInstance:(id)arg1;	// IMP=0x0000000100147dbc
+ (id)sharedInstance;	// IMP=0x0000000100147db0
- (void).cxx_destruct;	// IMP=0x00000001001509d8
@property(retain, nonatomic) NSURL *lastRecordedItemURL; // @synthesize lastRecordedItemURL=_lastRecordedItemURL;
@property(retain, nonatomic) NSMutableSet *recordedPlayEventsForCurrentItem; // @synthesize recordedPlayEventsForCurrentItem=_recordedPlayEventsForCurrentItem;
@property(retain, nonatomic) NSTimer *setPlaybackQueueRequestTimeoutTimer; // @synthesize setPlaybackQueueRequestTimeoutTimer=_setPlaybackQueueRequestTimeoutTimer;
@property(retain, nonatomic) MTSetPlaybackQueueRequest *pendingSetPlaybackQueueRequest; // @synthesize pendingSetPlaybackQueueRequest=_pendingSetPlaybackQueueRequest;
@property(retain, nonatomic) NSObject<OS_dispatch_semaphore> *restorationSemaphore; // @synthesize restorationSemaphore=_restorationSemaphore;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *restorationQueue; // @synthesize restorationQueue=_restorationQueue;
@property(nonatomic, getter=isPlayerManifestRestored) _Bool playerManifestRestored; // @synthesize playerManifestRestored=_playerManifestRestored;
@property(nonatomic) _Bool shouldFindSomethingToPlay; // @synthesize shouldFindSomethingToPlay=_shouldFindSomethingToPlay;
@property(retain, nonatomic) NSUserActivity *currentActivity; // @synthesize currentActivity=_currentActivity;
@property(nonatomic) double metricsPlayStartPosition; // @synthesize metricsPlayStartPosition=_metricsPlayStartPosition;
@property(nonatomic) long long metricsPlayStartTime; // @synthesize metricsPlayStartTime=_metricsPlayStartTime;
@property(nonatomic) double lastPlaybackSaveTime; // @synthesize lastPlaybackSaveTime=_lastPlaybackSaveTime;
@property(nonatomic) _Bool hasReportedThisEpisode; // @synthesize hasReportedThisEpisode=_hasReportedThisEpisode;
@property(retain, nonatomic) NSString *previousPlayingEpisodeUuid; // @synthesize previousPlayingEpisodeUuid=_previousPlayingEpisodeUuid;
@property(copy, nonatomic) CDUnknownBlockType platformSyncPlayheadChangeObserverBlock; // @synthesize platformSyncPlayheadChangeObserverBlock=_platformSyncPlayheadChangeObserverBlock;
@property(nonatomic) double currentTimse; // @synthesize currentTimse=_currentTimse;
@property(retain, nonatomic) MTPlayerManifest *userManifest; // @synthesize userManifest=_userManifest;
@property(retain, nonatomic) MTUpNextManifest *upNextManifest; // @synthesize upNextManifest=_upNextManifest;
@property(retain, nonatomic) MTCompositeManifest *compositeManifest; // @synthesize compositeManifest=_compositeManifest;
@property(retain, nonatomic) MPCPlayerPath *playerPath; // @synthesize playerPath=_playerPath;
@property(retain, nonatomic) IMAVPlayer *player; // @synthesize player=_player;
- (void)updateUPPEpisodeUuid:(id)arg1 bookmarkTime:(double)arg2;	// IMP=0x0000000100150790
- (void)userActivity:(id)arg1 didReceiveInputStream:(id)arg2 outputStream:(id)arg3;	// IMP=0x0000000100150718
- (void)userActivityWillSave:(id)arg1;	// IMP=0x0000000100150714
- (void)userActivityWasContinued:(id)arg1;	// IMP=0x0000000100150710
- (void)recordMetricsEventForErrorLog:(id)arg1 withEpisode:(id)arg2;	// IMP=0x00000001001503a0
- (void)recordMetricsEventForAccessLog:(id)arg1 playerItem:(id)arg2 episode:(id)arg3;	// IMP=0x00000001001501e4
- (void)recordMetricsForCurrentItem;	// IMP=0x000000010014fd00
- (void)recordMTPlayerMetricsForCurrentItem;	// IMP=0x000000010014f808
- (void)_sendMediaRemoteCommand:(unsigned int)arg1 toPlayer:(void *)arg2;	// IMP=0x000000010014f704
- (void)_performMediaRemoteCommand:(unsigned int)arg1;	// IMP=0x000000010014f55c
- (void *)_localPlayerPath;	// IMP=0x000000010014f4dc
- (id)_activityRestorationPath;	// IMP=0x000000010014f478
- (id)_loadActivityForRestoration;	// IMP=0x000000010014f07c
- (void)_saveActivityForRestoration;	// IMP=0x000000010014ed20
- (void)_currentActivityResignCurrent;	// IMP=0x000000010014ec70
- (void)_currentActivityBecomeCurrent;	// IMP=0x000000010014eb90
- (void)_updateCurrentActivityForPlayState;	// IMP=0x000000010014ead4
- (void)restoreFromUserActivity:(id)arg1 withManifest:(id)arg2 startPlayback:(_Bool)arg3 reason:(unsigned long long)arg4 interactive:(_Bool)arg5 completion:(CDUnknownBlockType)arg6;	// IMP=0x000000010014e648
- (void)restoreFromUserActivity:(id)arg1 startPlayback:(_Bool)arg2 reason:(unsigned long long)arg3 interactive:(_Bool)arg4 completion:(CDUnknownBlockType)arg5;	// IMP=0x000000010014e404
- (void)_restoreManifestIfNeededWithCompletion:(CDUnknownBlockType)arg1 useEmptyManifest:(_Bool)arg2;	// IMP=0x000000010014e28c
- (void)_restoreDefaultManifestIfNeededWithCompletion:(CDUnknownBlockType)arg1;	// IMP=0x000000010014e27c
- (void)_restoreEmptyManifestIfNeededWithCompletion:(CDUnknownBlockType)arg1;	// IMP=0x000000010014e26c
- (void)_restorePlayerManifestWithCompletion:(CDUnknownBlockType)arg1;	// IMP=0x000000010014dd48
- (void)restorePlayerManifestWithCompletion:(CDUnknownBlockType)arg1;	// IMP=0x000000010014dc80
- (void)clearPlayerManifestWithCompletion:(CDUnknownBlockType)arg1;	// IMP=0x000000010014db5c
- (id)_alertControllerForClearingOrKeepingUpNextWithRequest:(id)arg1;	// IMP=0x000000010014d678
- (void)_showGenericPromptToClearUpNextWithRequest:(id)arg1;	// IMP=0x000000010014d394
- (_Bool)_promptToClearUpNextIfNeededForRequest:(id)arg1;	// IMP=0x000000010014cf60
- (_Bool)_shouldOpenExternalItemForEpisode:(id)arg1;	// IMP=0x000000010014ce20
- (_Bool)_openExternalItemIfNeededForManifest:(id)arg1;	// IMP=0x000000010014cda8
- (long long)_validatePlaybackRequest:(id)arg1;	// IMP=0x000000010014c83c
- (id)_currentEpisodeForManifest:(id)arg1;	// IMP=0x000000010014c5d8
- (void)_tryResolvingPendingSetPlaybackQueueRequest;	// IMP=0x000000010014c4a4
- (void)_setLocalPlaybackQueue:(id)arg1;	// IMP=0x000000010014bc88
- (void)_setPlaybackQueue:(id)arg1;	// IMP=0x000000010014bae4
- (void)playManifest:(id)arg1 reason:(unsigned long long)arg2;	// IMP=0x000000010014ba50
- (void)playManifest:(id)arg1 reason:(unsigned long long)arg2 interactive:(_Bool)arg3 presentationType:(unsigned long long)arg4 completion:(CDUnknownBlockType)arg5;	// IMP=0x000000010014b970
- (void)setManifest:(id)arg1 startPlayback:(_Bool)arg2 forceLocal:(_Bool)arg3 reason:(unsigned long long)arg4 interactive:(_Bool)arg5 completion:(CDUnknownBlockType)arg6;	// IMP=0x000000010014b894
- (void)playManifest:(id)arg1 reason:(unsigned long long)arg2 interactive:(_Bool)arg3 completion:(CDUnknownBlockType)arg4;	// IMP=0x000000010014b824
- (void)setManifest:(id)arg1 startPlayback:(_Bool)arg2 reason:(unsigned long long)arg3 interactive:(_Bool)arg4 completion:(CDUnknownBlockType)arg5;	// IMP=0x000000010014b7b0
- (void)setManifest:(id)arg1 reason:(unsigned long long)arg2 interactive:(_Bool)arg3 completion:(CDUnknownBlockType)arg4;	// IMP=0x000000010014b740
- (void)setPlaybackQueue:(id)arg1;	// IMP=0x000000010014b57c
- (void)setManifest:(id)arg1 startPlayback:(_Bool)arg2 destination:(unsigned long long)arg3 context:(id)arg4 completion:(CDUnknownBlockType)arg5;	// IMP=0x000000010014b468
- (void)setManifestAsDryRun:(id)arg1 reason:(unsigned long long)arg2 completion:(CDUnknownBlockType)arg3;	// IMP=0x000000010014b348
- (void)setManifest:(id)arg1 startPlayback:(_Bool)arg2 forceLocal:(_Bool)arg3 context:(id)arg4 completion:(CDUnknownBlockType)arg5;	// IMP=0x000000010014b234
- (void)setManifest:(id)arg1 startPlayback:(_Bool)arg2 context:(id)arg3 completion:(CDUnknownBlockType)arg4;	// IMP=0x000000010014b1b4
- (void)setManifest:(id)arg1 context:(id)arg2 completion:(CDUnknownBlockType)arg3;	// IMP=0x000000010014b144
- (void)playManifest:(id)arg1 context:(id)arg2 completion:(CDUnknownBlockType)arg3;	// IMP=0x000000010014b0d4
- (void)dismissNowPlayingAnimated:(_Bool)arg1 completion:(CDUnknownBlockType)arg2;	// IMP=0x000000010014b0d0
- (void)dismissNowPlayingAnimated:(_Bool)arg1;	// IMP=0x000000010014b0c0
- (void)presentNowPlayingAnimated:(_Bool)arg1;	// IMP=0x000000010014b028
- (_Bool)isPlayingEpisodeUuid:(id)arg1;	// IMP=0x000000010014afac
- (id)playingEpisodeUuid;	// IMP=0x000000010014af58
- (id)currentItem;	// IMP=0x000000010014af04
- (_Bool)isPlayerTargetLocal;	// IMP=0x000000010014ae80
- (void)setPlayerRoute:(id)arg1;	// IMP=0x000000010014ae7c
- (void)resolveActivePlayerPathWithCompletion:(CDUnknownBlockType)arg1;	// IMP=0x000000010014ac7c
- (_Bool)isSeekingOrScrubbing;	// IMP=0x000000010014ac30
- (void)setCurrentTime:(double)arg1;	// IMP=0x000000010014abe0
- (double)currentTime;	// IMP=0x000000010014ab8c
- (_Bool)isTargetPlaying;	// IMP=0x000000010014ab80
- (_Bool)isPlayingLocally;	// IMP=0x000000010014ab34
- (void)playPlayerTarget;	// IMP=0x000000010014aae0
- (void)playLocalPlayer;	// IMP=0x000000010014aaa0
- (void)pausePlayerTarget;	// IMP=0x000000010014aa4c
- (void)pauseLocalPlayer;	// IMP=0x000000010014aa0c
- (void)playItemAtIndex:(unsigned long long)arg1;	// IMP=0x000000010014a9c4
- (void)_performAfterPlay:(id)arg1 playbackStarted:(_Bool)arg2;	// IMP=0x000000010014a73c
- (void)playWithContext:(id)arg1 completion:(CDUnknownBlockType)arg2;	// IMP=0x000000010014a5e4
- (_Bool)playWithContext:(id)arg1;	// IMP=0x000000010014a558
- (_Bool)playWithReason:(unsigned long long)arg1 interruptEvent:(_Bool)arg2;	// IMP=0x000000010014a4c8
- (_Bool)playWithReason:(unsigned long long)arg1;	// IMP=0x000000010014a4b8
- (void)openExternalEpisode:(id)arg1;	// IMP=0x000000010014a368
- (_Bool)shouldPresentNowPlayingForItem:(id)arg1 presentationType:(unsigned long long)arg2;	// IMP=0x000000010014a338
- (void)playbackStateDidChange;	// IMP=0x0000000100149f50
- (void)playerBufferEmptyDidChange;	// IMP=0x0000000100149f44
- (void)playerPeriodicUpdate;	// IMP=0x0000000100149a28
- (void)playerHeadWillChange:(id)arg1;	// IMP=0x0000000100149870
- (void)currentItemDidChange;	// IMP=0x00000001001493fc
- (_Bool)updateEpisode:(id)arg1 andPlayerItem:(id)arg2 withElapsedTime:(double)arg3 andDuration:(double)arg4 onMediaItemWillChange:(_Bool)arg5;	// IMP=0x00000001001490f8
- (void)currentItemWillChange:(id)arg1;	// IMP=0x0000000100148ad8
- (void)playerFailure:(id)arg1 shouldShowDialog:(_Bool)arg2;	// IMP=0x000000010014869c
- (void)playerFailedToPlayToEndTime:(id)arg1;	// IMP=0x00000001001485e8
- (void)playerErrorDidOccur:(id)arg1;	// IMP=0x00000001001485d8
- (void)tearDownPlayerNotifications;	// IMP=0x0000000100148588
- (void)setupPlayerNotifications;	// IMP=0x00000001001482a0
- (void)dealloc;	// IMP=0x0000000100148170
- (id)init;	// IMP=0x0000000100147e74
- (id)copy;	// IMP=0x0000000100147e4c

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

