//
//     Generated by classdumpios 1.0.1 (64 bit) (iOS port by DreamDevLost)(Debug version compiled Jun 10 2020 10:03:13).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

@class BKHIDEventSequenceRecognizer, BKIOHIDService, BKSHIDEventDescriptor, BSMutableIntegerMap, NSString;

@interface BKKeyboardInfo : NSObject
{
    _Bool _swallowEvents;	// 8 = 0x8
    _Bool _capsLockOn;	// 9 = 0x9
    _Bool _capsLockRomanSwitchMode;	// 10 = 0xa
    _Bool _capsLockKeyHasLanguageSwitchLabel;	// 11 = 0xb
    unsigned char _countryCode;	// 12 = 0xc
    _Bool _shouldActivateByGesture;	// 13 = 0xd
    unsigned int _keyboardType;	// 16 = 0x10
    BKIOHIDService *_service;	// 24 = 0x18
    long long _activeModifiers;	// 32 = 0x20
    NSString *_keyboardLayout;	// 40 = 0x28
    NSString *_keyboardLanguage;	// 48 = 0x30
    struct __GSKeyboard *__gsKeyboard;	// 56 = 0x38
    BKHIDEventSequenceRecognizer *_eventRecognizer;	// 64 = 0x40
    BKSHIDEventDescriptor *_keyboardActivationEventDescriptor;	// 72 = 0x48
    BSMutableIntegerMap *_keyCodeDownPerDestination;	// 80 = 0x50
}

+ (id)keyboardInfoWithIOHIDService:(id)arg1;	// IMP=0x0000000100057df4
- (void).cxx_destruct;	// IMP=0x0000000100057d94
@property(retain, nonatomic) BSMutableIntegerMap *keyCodeDownPerDestination; // @synthesize keyCodeDownPerDestination=_keyCodeDownPerDestination;
@property(retain, nonatomic) BKSHIDEventDescriptor *keyboardActivationEventDescriptor; // @synthesize keyboardActivationEventDescriptor=_keyboardActivationEventDescriptor;
@property(retain, nonatomic) BKHIDEventSequenceRecognizer *eventRecognizer; // @synthesize eventRecognizer=_eventRecognizer;
@property(readonly, nonatomic) _Bool shouldActivateByGesture; // @synthesize shouldActivateByGesture=_shouldActivateByGesture;
@property(readonly, nonatomic) struct __GSKeyboard *_gsKeyboard; // @synthesize _gsKeyboard=__gsKeyboard;
@property(copy, nonatomic) NSString *keyboardLanguage; // @synthesize keyboardLanguage=_keyboardLanguage;
@property(copy, nonatomic) NSString *keyboardLayout; // @synthesize keyboardLayout=_keyboardLayout;
@property(nonatomic) unsigned int keyboardType; // @synthesize keyboardType=_keyboardType;
@property(nonatomic) unsigned char countryCode; // @synthesize countryCode=_countryCode;
@property(readonly, nonatomic) _Bool capsLockKeyHasLanguageSwitchLabel; // @synthesize capsLockKeyHasLanguageSwitchLabel=_capsLockKeyHasLanguageSwitchLabel;
@property(nonatomic) _Bool capsLockRomanSwitchMode; // @synthesize capsLockRomanSwitchMode=_capsLockRomanSwitchMode;
@property(nonatomic, getter=isCapsLockOn) _Bool capsLockOn; // @synthesize capsLockOn=_capsLockOn;
@property(nonatomic, getter=shouldSwallowEvents) _Bool swallowEvents; // @synthesize swallowEvents=_swallowEvents;
@property(nonatomic) long long activeModifiers; // @synthesize activeModifiers=_activeModifiers;
@property(retain, nonatomic) BKIOHIDService *service; // @synthesize service=_service;
- (void)loadModifierKeyRemapping;	// IMP=0x00000001000577a8
- (void)setCapsLockDelayOverride:(double)arg1;	// IMP=0x0000000100057668
- (void)setCapsLockLEDOn:(_Bool)arg1;	// IMP=0x0000000100057540
@property(readonly, nonatomic) BKSHIDEventDescriptor *keyboardActivationChangeEventDescriptor;
@property(readonly, nonatomic, getter=isKeyboardActive) _Bool keyboardActive;
- (void)removeDestinationsForKeyCode:(long long)arg1;	// IMP=0x0000000100056ff0
- (void)addDestination:(id)arg1 forDownKeyCode:(long long)arg2;	// IMP=0x0000000100056eb0
- (void)setDestinations:(id)arg1 forDownKeyCode:(long long)arg2;	// IMP=0x0000000100056d9c
- (id)destinationsForDownKeyCode:(long long)arg1;	// IMP=0x0000000100056d8c
@property(readonly, nonatomic) unsigned long long keyDownCount;
- (id)description;	// IMP=0x0000000100056b90
- (void)dealloc;	// IMP=0x0000000100056b44
- (id)initWithService:(id)arg1;	// IMP=0x0000000100056974

@end

