//
//     Generated by classdumpios 1.0.1 (64 bit) (iOS port by DreamDevLost)(Debug version compiled Jun 10 2020 10:03:13).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

#import "NSSecureCoding-Protocol.h"

@class CKRecord, GKCloudPlayer, NSArray, NSData, NSDate, NSDictionary, NSMutableDictionary, NSString, NSURL;

@interface GKCloudGameSession : NSObject <NSSecureCoding>
{
    CKRecord *_record;	// 8 = 0x8
    NSDictionary *_playersByIdentifier;	// 16 = 0x10
    GKCloudPlayer *_owner;	// 24 = 0x18
    NSURL *_url;	// 32 = 0x20
}

+ (void)badgeCountForContainerName:(id)arg1 useCacheDirectly:(_Bool)arg2 handler:(CDUnknownBlockType)arg3;	// IMP=0x000000010011ac94
+ (void)updateBadgeCountsForContainerName:(id)arg1 useCacheDirectly:(_Bool)arg2;	// IMP=0x000000010011a8d8
+ (void)updateBadgeCountsForContainerName:(id)arg1;	// IMP=0x000000010011a8c8
+ (void)deleteInviteRecordWithRecordID:(id)arg1 fromDatabase:(id)arg2;	// IMP=0x000000010011a56c
+ (void)searchAndSaveIdentityForRecord:(id)arg1 database:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x000000010011a550
+ (void)saveInviteRecord:(id)arg1 database:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x0000000100119bc4
+ (id)getAssociatedAccounts;	// IMP=0x0000000100119bbc
+ (void)generateAndStoreInviteBulletinForRecord:(id)arg1 database:(id)arg2;	// IMP=0x0000000100118fe4
+ (id)packFakeTurnBasedBulletinWithZoneData:(id)arg1;	// IMP=0x0000000100118abc
+ (id)packFakeRealTimeBulletinWithZoneData:(id)arg1;	// IMP=0x0000000100117f30
+ (void)reportPlayerStateChangesToClients:(id)arg1 forUpdatedSession:(id)arg2 oldSession:(id)arg3;	// IMP=0x0000000100116cac
+ (void)openStoreForBundleID:(id)arg1;	// IMP=0x00000001001156e4
+ (void)launchOrOpenAppStoreForBundleID:(id)arg1;	// IMP=0x000000010011568c
+ (void)acceptShareMetadata:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;	// IMP=0x000000010011515c
+ (void)showAcceptAlertWithHandler:(CDUnknownBlockType)arg1;	// IMP=0x0000000100114f9c
+ (void)handleLegacyShareMetadata:(id)arg1 needsAccept:(_Bool)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x00000001001144d0
+ (void)handleSessionShareMetadata:(id)arg1 needsAccept:(_Bool)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x0000000100113c64
+ (void)handleCloudKitShareMetadata:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;	// IMP=0x0000000100113490
+ (void)acceptShareURL:(id)arg1 handler:(CDUnknownBlockType)arg2;	// IMP=0x0000000100113100
+ (void)saveInformationForPrimaryUserForSessionWithShareMetadata:(id)arg1 handler:(CDUnknownBlockType)arg2;	// IMP=0x00000001001127d8
+ (void)fetchShareMetadataForURL:(id)arg1 handler:(CDUnknownBlockType)arg2;	// IMP=0x0000000100112324
+ (void)fetchShareRecordsWithRecordIDs:(id)arg1 inDatabase:(id)arg2 handler:(CDUnknownBlockType)arg3;	// IMP=0x0000000100112200
+ (id)cloudKitOperationConfigurationForSocialGamingSessionsContainer;	// IMP=0x000000010011100c
+ (id)cloudKitOperationConfigurationForContainer:(id)arg1;	// IMP=0x0000000100110f7c
+ (void)subscribeToAllDBwithHandler:(CDUnknownBlockType)arg1;	// IMP=0x0000000100110a54
+ (void)getZoneNamesWithCompletionHandler:(CDUnknownBlockType)arg1;	// IMP=0x0000000100110464
+ (void)createZoneWithName:(id)arg1 handler:(CDUnknownBlockType)arg2;	// IMP=0x0000000100110254
+ (void)bundleIDsForContainerName:(id)arg1 handler:(CDUnknownBlockType)arg2;	// IMP=0x000000010010f038
+ (void)removeSessionWithIdentifier:(id)arg1 handler:(CDUnknownBlockType)arg2;	// IMP=0x000000010010e7d4
+ (void)createSessionWithContainerName:(id)arg1 title:(id)arg2 maxConnectedPlayers:(long long)arg3 handler:(CDUnknownBlockType)arg4;	// IMP=0x000000010010daf8
+ (_Bool)isCloudDriveEnabledForBundleID:(id)arg1;	// IMP=0x000000010010d844
+ (id)databaseForZoneID:(id)arg1;	// IMP=0x000000010010d7f4
+ (id)databaseForSession:(id)arg1;	// IMP=0x000000010010d7a0
+ (id)sharedDatabase;	// IMP=0x000000010010d73c
+ (id)privateDatabase;	// IMP=0x000000010010d6d8
+ (_Bool)isOwnZoneID:(id)arg1;	// IMP=0x000000010010d5a8
+ (_Bool)isOwnRecordID:(id)arg1;	// IMP=0x000000010010d54c
+ (id)recordIDForSessionIdentifier:(id)arg1;	// IMP=0x000000010010d308
+ (id)sessionIdentifierForRecordID:(id)arg1;	// IMP=0x000000010010d108
+ (id)allowedCharacterSet;	// IMP=0x000000010010d034
+ (void)getFriendPlayersWithHandler:(CDUnknownBlockType)arg1;	// IMP=0x000000010010ca10
+ (void)updateFriendRecordIfNeeded;	// IMP=0x000000010010c2b0
+ (void)updateFriendsWithRecord:(id)arg1;	// IMP=0x000000010010bdc4
+ (void)updateCacheForFriendZoneID:(id)arg1 handler:(CDUnknownBlockType)arg2;	// IMP=0x000000010010b7b8
+ (void)updatePlayersForSessions:(id)arg1 sharesByRecordID:(id)arg2 inDatabase:(id)arg3 handler:(CDUnknownBlockType)arg4;	// IMP=0x000000010010a778
+ (void)primaryPlayerWithHandler:(CDUnknownBlockType)arg1;	// IMP=0x000000010010a6ac
+ (id)playerIdentifierForUserRecordName:(id)arg1;	// IMP=0x000000010010a5e8
+ (id)localPlayerAlias;	// IMP=0x000000010010a36c
+ (void)determinePlayerChangesIn:(id)arg1 newSession:(id)arg2 notifyClients:(id)arg3;	// IMP=0x0000000100109d3c
+ (void)reportChangesForSessions:(id)arg1 shareChangedSessions:(id)arg2 removedSessions:(id)arg3 zoneID:(id)arg4 handler:(CDUnknownBlockType)arg5;	// IMP=0x0000000100109088
+ (id)allChangedSessionsFromRecordChangedSessions:(id)arg1 shareChangedSessions:(id)arg2;	// IMP=0x0000000100108cec
+ (void)updateCacheForDatabase:(id)arg1 zoneIDs:(id)arg2 handler:(CDUnknownBlockType)arg3;	// IMP=0x0000000100107434
+ (void)updateCacheForDatabaseScope:(long long)arg1 handler:(CDUnknownBlockType)arg2;	// IMP=0x0000000100105f3c
+ (void)updateCacheForZoneID:(id)arg1 handler:(CDUnknownBlockType)arg2;	// IMP=0x0000000100105b54
+ (void)updateSessionCacheDatabasesWithHandler:(CDUnknownBlockType)arg1;	// IMP=0x000000010010579c
+ (void)updateSessionCacheWithHandler:(CDUnknownBlockType)arg1;	// IMP=0x0000000100105320
+ (void)updateUserWithHandler:(CDUnknownBlockType)arg1;	// IMP=0x00000001001052b4
+ (void)fetchUserRecordIDWithHandler:(CDUnknownBlockType)arg1;	// IMP=0x000000010010523c
+ (id)friendEmailsByID;	// IMP=0x00000001001051e8
+ (void)sessionForShareMetadata:(id)arg1 handler:(CDUnknownBlockType)arg2;	// IMP=0x0000000100105134
+ (void)sessionsForContainerName:(id)arg1 handler:(CDUnknownBlockType)arg2;	// IMP=0x0000000100104d68
+ (void)sessionForIdentifier:(id)arg1 handler:(CDUnknownBlockType)arg2;	// IMP=0x00000001001049a8
+ (id)cacheQueue;	// IMP=0x0000000100104938
+ (id)sessionCache;	// IMP=0x00000001001048cc
+ (id)AES128Operation:(unsigned int)arg1 key:(id)arg2 data:(id)arg3;	// IMP=0x0000000100104764
+ (id)AES128DecryptedVersionOfData:(id)arg1 withKey:(id)arg2;	// IMP=0x00000001001046fc
+ (id)AES128EncryptedVersionOfData:(id)arg1 withKey:(id)arg2;	// IMP=0x0000000100104694
+ (id)playerIdentifierForObfuscatedIdentifier:(id)arg1 containerName:(id)arg2;	// IMP=0x0000000100104598
+ (id)obfuscatedIdentifierForPlayerIdentifier:(id)arg1 containerName:(id)arg2;	// IMP=0x00000001001044a0
+ (id)mutablePlistFromPlayerStatesData:(id)arg1 error:(id *)arg2;	// IMP=0x000000010010375c
+ (_Bool)supportsSecureCoding;	// IMP=0x0000000100102b6c
- (void).cxx_destruct;	// IMP=0x000000010011bd88
@property(retain, nonatomic) NSURL *url; // @synthesize url=_url;
@property(retain, nonatomic) GKCloudPlayer *owner; // @synthesize owner=_owner;
@property(retain, nonatomic) NSDictionary *playersByIdentifier; // @synthesize playersByIdentifier=_playersByIdentifier;
@property(retain, nonatomic) CKRecord *record; // @synthesize record=_record;
- (void)setBadged:(_Bool)arg1 forPlayerIDs:(id)arg2 handler:(CDUnknownBlockType)arg3;	// IMP=0x000000010011b474
- (void)saveConnectionState:(long long)arg1 forPlayerWithID:(id)arg2 handler:(CDUnknownBlockType)arg3;	// IMP=0x0000000100117654
- (void)tempEmailFixForPlayerID:(id)arg1;	// IMP=0x00000001001174bc
@property(readonly, nonatomic) NSArray *connectedPlayerIDs;
- (void)removePlayers:(id)arg1 handler:(CDUnknownBlockType)arg2;	// IMP=0x00000001001161ac
- (void)deleteShareWithHandler:(CDUnknownBlockType)arg1;	// IMP=0x0000000100115de8
- (void)fetchShareRecordWithRecordID:(id)arg1 handler:(CDUnknownBlockType)arg2;	// IMP=0x0000000100111fe8
- (void)saveShare:(id)arg1 isNewShare:(_Bool)arg2 handler:(CDUnknownBlockType)arg3;	// IMP=0x0000000100111bbc
- (void)setupShareWithRecordID:(id)arg1 handler:(CDUnknownBlockType)arg2;	// IMP=0x00000001001118f0
- (void)getShareURLWithHandler:(CDUnknownBlockType)arg1;	// IMP=0x00000001001110f8
- (void)saveWithHandler:(CDUnknownBlockType)arg1;	// IMP=0x000000010010ff34
- (void)saveData:(id)arg1 changeTag:(id)arg2 handler:(CDUnknownBlockType)arg3;	// IMP=0x000000010010f660
@property(readonly, nonatomic) NSString *containerName;
- (id)playersForGKGameSession;	// IMP=0x000000010010b428
- (id)players;	// IMP=0x000000010010b3d4
- (void)setPlayers:(id)arg1;	// IMP=0x000000010010b220
- (void)updatePlayersWithIdentities:(id)arg1;	// IMP=0x000000010010af84
- (id)createGKGameSession;	// IMP=0x0000000100103e28
@property(retain, nonatomic) NSMutableDictionary *nicknamesByIdentifier; // @dynamic nicknamesByIdentifier;
@property(retain, nonatomic) NSMutableDictionary *emailsByCKID;
@property(readonly, nonatomic) NSDictionary *playersByEmail;
- (id)playerStates;	// IMP=0x00000001001037b0
- (void)setPlayerStates:(id)arg1;	// IMP=0x00000001001036e8
@property(readonly, nonatomic) NSString *serverChangeTag;
@property(readonly, nonatomic) GKCloudPlayer *lastModifiedPlayer;
@property(readonly, nonatomic) NSDate *lastModifiedDate;
@property(retain, nonatomic) NSData *data;
@property(nonatomic) long long maxConnectedPlayers;
@property(retain, nonatomic) NSString *title;
@property(readonly, nonatomic) NSString *identifier;
- (_Bool)isOwnedByUser;	// IMP=0x0000000100103078
- (id)description;	// IMP=0x0000000100102f30
- (void)encodeWithCoder:(id)arg1;	// IMP=0x0000000100102e3c
- (id)initWithCoder:(id)arg1;	// IMP=0x0000000100102b74
- (id)initWithRecord:(id)arg1;	// IMP=0x0000000100102af8
- (id)initWithContainerName:(id)arg1;	// IMP=0x0000000100102a3c

@end

