//
//     Generated by classdumpios 1.0.1 (64 bit) (iOS port by DreamDevLost)(Debug version compiled Jun 10 2020 10:03:13).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

#import "OctagonStateFlagHandler-Protocol.h"
#import "OctagonStateOnqueuePendingFlagHandler-Protocol.h"

@class CKKSCondition, CKKSLockStateTracker, CKKSNearFutureScheduler, CKKSResultOperation, NSMutableArray, NSMutableDictionary, NSOperation, NSOperationQueue, NSSet, NSString, OctagonFlags;
@protocol OS_dispatch_queue, OctagonFlagContainer, OctagonStateMachineEngine, OctagonStateString;

__attribute__((visibility("hidden")))
@interface OctagonStateMachine : NSObject <OctagonStateFlagHandler, OctagonStateOnqueuePendingFlagHandler>
{
    NSString<OctagonStateString> *_currentState;	// 8 = 0x8
    _Bool _halted;	// 16 = 0x10
    _Bool _allowPendingFlags;	// 17 = 0x11
    NSMutableDictionary *_stateConditions;	// 24 = 0x18
    CKKSCondition *_paused;	// 32 = 0x20
    NSSet *_allowableStates;	// 40 = 0x28
    unsigned long long _timeout;	// 48 = 0x30
    CKKSLockStateTracker *_lockStateTracker;	// 56 = 0x38
    id <OctagonStateMachineEngine> _stateEngine;	// 64 = 0x40
    NSObject<OS_dispatch_queue> *_queue;	// 72 = 0x48
    NSOperationQueue *_operationQueue;	// 80 = 0x50
    NSString *_name;	// 88 = 0x58
    OctagonFlags *_currentFlags;	// 96 = 0x60
    NSOperation *_holdStateMachineOperation;	// 104 = 0x68
    CKKSResultOperation *_nextStateMachineCycleOperation;	// 112 = 0x70
    NSMutableArray *_stateMachineRequests;	// 120 = 0x78
    NSMutableArray *_stateMachineWatchers;	// 128 = 0x80
    NSMutableDictionary *_pendingFlags;	// 136 = 0x88
    CKKSNearFutureScheduler *_pendingFlagsScheduler;	// 144 = 0x90
    unsigned long long _conditionChecksInFlight;	// 152 = 0x98
    unsigned long long _currentConditions;	// 160 = 0xa0
    NSOperation *_checkUnlockOperation;	// 168 = 0xa8
}

- (void).cxx_destruct;	// IMP=0x00000001000da434
@property(retain) NSOperation *checkUnlockOperation; // @synthesize checkUnlockOperation=_checkUnlockOperation;
@property unsigned long long currentConditions; // @synthesize currentConditions=_currentConditions;
@property unsigned long long conditionChecksInFlight; // @synthesize conditionChecksInFlight=_conditionChecksInFlight;
@property(retain) CKKSNearFutureScheduler *pendingFlagsScheduler; // @synthesize pendingFlagsScheduler=_pendingFlagsScheduler;
@property(retain) NSMutableDictionary *pendingFlags; // @synthesize pendingFlags=_pendingFlags;
@property _Bool allowPendingFlags; // @synthesize allowPendingFlags=_allowPendingFlags;
@property _Bool halted; // @synthesize halted=_halted;
@property(retain) NSMutableArray *stateMachineWatchers; // @synthesize stateMachineWatchers=_stateMachineWatchers;
@property(retain) NSMutableArray *stateMachineRequests; // @synthesize stateMachineRequests=_stateMachineRequests;
@property(retain) CKKSResultOperation *nextStateMachineCycleOperation; // @synthesize nextStateMachineCycleOperation=_nextStateMachineCycleOperation;
@property(retain) NSOperation *holdStateMachineOperation; // @synthesize holdStateMachineOperation=_holdStateMachineOperation;
@property(retain) OctagonFlags *currentFlags; // @synthesize currentFlags=_currentFlags;
@property(retain) NSString *name; // @synthesize name=_name;
@property(retain) NSOperationQueue *operationQueue; // @synthesize operationQueue=_operationQueue;
@property(retain) NSObject<OS_dispatch_queue> *queue; // @synthesize queue=_queue;
@property __weak id <OctagonStateMachineEngine> stateEngine; // @synthesize stateEngine=_stateEngine;
@property(retain) CKKSLockStateTracker *lockStateTracker; // @synthesize lockStateTracker=_lockStateTracker;
@property(nonatomic) unsigned long long timeout; // @synthesize timeout=_timeout;
@property(readonly) NSSet *allowableStates; // @synthesize allowableStates=_allowableStates;
@property(retain) CKKSCondition *paused; // @synthesize paused=_paused;
@property(retain) NSMutableDictionary *stateConditions; // @synthesize stateConditions=_stateConditions;
- (void)doWatchedStateMachineRPC:(id)arg1 sourceStates:(id)arg2 path:(id)arg3 reply:(CDUnknownBlockType)arg4;	// IMP=0x00000001000d9d90
- (void)setWatcherTimeout:(unsigned long long)arg1;	// IMP=0x00000001000d9d84
- (void)doSimpleStateMachineRPC:(id)arg1 op:(id)arg2 sourceStates:(id)arg3 reply:(CDUnknownBlockType)arg4;	// IMP=0x00000001000d9a10
- (void)registerStateTransitionWatcher:(id)arg1;	// IMP=0x00000001000d9960
- (void)handleExternalRequest:(id)arg1;	// IMP=0x00000001000d98b0
- (void)haltOperation;	// IMP=0x00000001000d9804
- (void)startOperation;	// IMP=0x00000001000d9788
- (_Bool)isPaused;	// IMP=0x00000001000d96b8
- (void)_onqueueSendAnyPendingFlags;	// IMP=0x00000001000d907c
- (void)_onqueueRecheckConditions;	// IMP=0x00000001000d8c14
- (id)possiblePendingFlags;	// IMP=0x00000001000d8bc0
- (id)dumpPendingFlags;	// IMP=0x00000001000d8a9c
- (void)disablePendingFlags;	// IMP=0x00000001000d8a20
- (void)_onqueueHandlePendingFlag:(id)arg1;	// IMP=0x00000001000d88f0
- (void)handlePendingFlag:(id)arg1;	// IMP=0x00000001000d8840
- (void)handleFlag:(id)arg1;	// IMP=0x00000001000d8790
- (void)_onqueuePokeStateMachine;	// IMP=0x00000001000d8740
- (void)pokeStateMachine;	// IMP=0x00000001000d86c4
- (id)createOperationToFinishAttempt:(id)arg1;	// IMP=0x00000001000d854c
- (void)_onqueueStartNextStateMachineOperation:(_Bool)arg1;	// IMP=0x00000001000d8170
- (id)_onqueueNextStateMachineTransition;	// IMP=0x00000001000d7d68
- (id)waitForState:(id)arg1 wait:(unsigned long long)arg2;	// IMP=0x00000001000d7cb0
@property(retain) NSString<OctagonStateString> *currentState;
@property(readonly) id <OctagonFlagContainer> flags;
- (id)description;	// IMP=0x00000001000d7938
- (id)pendingFlagsString;	// IMP=0x00000001000d78b4
- (id)initWithName:(id)arg1 states:(id)arg2 flags:(id)arg3 initialState:(id)arg4 queue:(id)arg5 stateEngine:(id)arg6 lockStateTracker:(id)arg7;	// IMP=0x00000001000d7394

@end

