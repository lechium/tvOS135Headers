//
//     Generated by classdumpios 1.0.1 (64 bit) (iOS port by DreamDevLost)(Debug version compiled Jun 10 2020 10:03:13).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

#import "TMDaemonCore-Protocol.h"
#import "TMTimeZoneManagerDelegate-Protocol.h"

@class NSMutableArray, NSMutableDictionary, NSMutableSet, NSString, NSUUID, TMBackgroundNtpSource, TMPreferences, TMTimeSynthesizer, TMTimeZoneManager;
@protocol OS_os_transaction, TMMonotonicClock, TMTimeProvider;

@interface TMDaemonCore : NSObject <TMTimeZoneManagerDelegate, TMDaemonCore>
{
    TMTimeZoneManager *_timeZoneManager;	// 8 = 0x8
    TMTimeSynthesizer *_timeSynthesizer;	// 16 = 0x10
    TMTimeSynthesizer *_clamp;	// 24 = 0x18
    TMBackgroundNtpSource *_ntpSource;	// 32 = 0x20
    _Bool _systemTimeSet;	// 40 = 0x28
    NSMutableSet *_plugins;	// 48 = 0x30
    TMPreferences *_prefs;	// 56 = 0x38
    double _settimeofdayThreshold;	// 64 = 0x40
    NSMutableArray *_pendingSetupTimeHandlers;	// 72 = 0x48
    double _rtcBBActiveTimeCheck;	// 80 = 0x50
    NSMutableDictionary *_timeProviders;	// 88 = 0x58
    NSObject<OS_os_transaction> *_keepAliveTransaction;	// 96 = 0x60
    NSUUID *hostUUID;	// 104 = 0x68
    unsigned long long clampDiscardCount;	// 112 = 0x70
    double lastCachedRTC;	// 120 = 0x78
    _Bool _requiresActiveBBTime;	// 128 = 0x80
    long long _retrySystemTimeCount;	// 136 = 0x88
    id <TMMonotonicClock> _clock;	// 144 = 0x90
}

+ (_Bool)adjtime:(double)arg1 sf:(id)arg2 unc:(id)arg3;	// IMP=0x0000000100005cd0
@property(retain, nonatomic) id <TMMonotonicClock> clock; // @synthesize clock=_clock;
@property(nonatomic) long long retrySystemTimeCount; // @synthesize retrySystemTimeCount=_retrySystemTimeCount;
@property(nonatomic) _Bool requiresActiveBBTime; // @synthesize requiresActiveBBTime=_requiresActiveBBTime;
@property(nonatomic, getter=isSystemTimeSet) _Bool systemTimeSet; // @synthesize systemTimeSet=_systemTimeSet;
- (void)addTimeProvider:(id)arg1 forKey:(id)arg2;	// IMP=0x000000010000d478
@property(readonly, nonatomic) id <TMTimeProvider> timeProvider;
- (void)updateTimeZoneUI;	// IMP=0x000000010000d3c8
- (void)timeZoneManager:(id)arg1 shouldFetch:(id)arg2;	// IMP=0x000000010000d374
- (void)timeZoneManager:(id)arg1 didComputeResult:(id)arg2;	// IMP=0x000000010000d280
- (void)timeZoneManager:(id)arg1 didReset:(id)arg2;	// IMP=0x000000010000d210
- (void)updateNTPSchedulingInterval;	// IMP=0x000000010000d1c0
- (void)resetTimeZone:(id)arg1;	// IMP=0x000000010000cf04
- (void)resetToFirstLaunch:(id)arg1 withHandler:(CDUnknownBlockType)arg2;	// IMP=0x000000010000cc44
- (void)setupTimeZone:(id)arg1 withHandler:(CDUnknownBlockType)arg2;	// IMP=0x000000010000c244
- (void)_setupTimeWithHandler:(CDUnknownBlockType)arg1;	// IMP=0x000000010000c1f0
- (void)setupTime:(id)arg1 withHandler:(CDUnknownBlockType)arg2;	// IMP=0x000000010000bec8
- (void)checkActiveTimeZoneSourceRequired;	// IMP=0x000000010000be00
- (void)provideBBTime:(id)arg1 withHandler:(CDUnknownBlockType)arg2;	// IMP=0x000000010000b8a8
- (id)isBBTimeActive;	// IMP=0x000000010000b804
- (id)referenceTime;	// IMP=0x000000010000b794
- (void)setSourceTimeZone:(id)arg1;	// IMP=0x000000010000b40c
- (void)setSourceUnavailable:(id)arg1;	// IMP=0x000000010000b148
- (void)setSourceAvailable:(id)arg1;	// IMP=0x000000010000ae84
- (void)confirmTimeZone:(id)arg1 withHandler:(CDUnknownBlockType)arg2;	// IMP=0x000000010000ac44
- (_Bool)isTimeZoneConfirmed:(id)arg1;	// IMP=0x000000010000ac1c
- (void)setSourceTime:(id)arg1;	// IMP=0x000000010000a5dc
- (void)setAuthenticatedSourceTime:(id)arg1;	// IMP=0x000000010000a4a8
- (void)setManualTime:(id)arg1;	// IMP=0x000000010000a32c
- (void)checkActiveTimeSourceRequired;	// IMP=0x0000000100009d9c
@property(nonatomic, getter=isAutomaticTimeZoneEnabled) _Bool automaticTimeZoneEnabled;
@property(nonatomic, getter=isAutomaticTimeEnabled) _Bool automaticTimeEnabled;
- (void)_executeCommand:(id)arg1 withHandler:(CDUnknownBlockType)arg2;	// IMP=0x0000000100008a84
- (void)executeCommand:(id)arg1 withHandler:(CDUnknownBlockType)arg2;	// IMP=0x0000000100008110
- (_Bool)shouldConvertMachTimeOfCommand:(id)arg1;	// IMP=0x0000000100007f68
- (id)cacheUrl;	// IMP=0x0000000100007efc
- (id)cacheDir;	// IMP=0x0000000100007ec4
- (void)emptyCache;	// IMP=0x0000000100007e34
- (void)touchCache:(struct timeval *)arg1;	// IMP=0x0000000100007d78
- (id)filesystemTimestamp;	// IMP=0x0000000100007a08
- (void)cacheStateToDisk;	// IMP=0x0000000100007710
- (id)UUID;	// IMP=0x0000000100007688
@property(nonatomic, getter=isSystemTimeZoneSet) _Bool systemTimeZoneSet;
- (void)testAndApplyNewSystemTimeZone:(id)arg1;	// IMP=0x00000001000074e8
- (_Bool)isSameAsSystemTimeZone:(id)arg1;	// IMP=0x00000001000073c0
- (_Bool)setSystemTimeZone:(id)arg1;	// IMP=0x0000000100006ec4
- (_Bool)shouldDisplayTimeZonePopup;	// IMP=0x0000000100006eb4
- (_Bool)shouldSetSystemTimeZone;	// IMP=0x0000000100006ea8
- (void)sendSystemTimeChangeNotification;	// IMP=0x0000000100006ce0
- (void)_testAndApplySystemTime;	// IMP=0x000000010000623c
- (void)testAndApplySystemTime;	// IMP=0x000000010000612c
- (void)testAndApplyNewSystemTime;	// IMP=0x00000001000060cc
- (_Bool)setSystemTime:(double)arg1 fromSource:(const char *)arg2;	// IMP=0x0000000100005b40
- (_Bool)shouldSetSystemTime;	// IMP=0x0000000100005b34
- (void)addPlugin:(id)arg1;	// IMP=0x0000000100005af0
- (void)deliverOptionalPluginMessage:(SEL)arg1 withObject:(id)arg2;	// IMP=0x00000001000059c0
- (void)dealloc;	// IMP=0x00000001000058d4
- (id)initWithTimeZoneRules:(id)arg1 monotonicClock:(id)arg2 preferences:(id)arg3;	// IMP=0x0000000100005260
- (_Bool)cacheIsValid:(id)arg1;	// IMP=0x0000000100004eb8
- (void)handleShutdown;	// IMP=0x0000000100004e74
- (void)setAccurateThresholds:(_Bool)arg1;	// IMP=0x0000000100004e64

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

