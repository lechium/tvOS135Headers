//
//     Generated by classdumpios 1.0.1 (64 bit) (iOS port by DreamDevLost)(Debug version compiled Jun 10 2020 10:03:13).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

#import "NSCopying-Protocol.h"
#import "NSSecureCoding-Protocol.h"

@class NRDLDKeys, NSData, NSDate, NSString, NSUUID;

@interface NRDLocalDevice : NSObject <NSCopying, NSSecureCoding>
{
    _Bool _isRegistered;	// 8 = 0x8
    _Bool _isEnabled;	// 9 = 0x9
    _Bool _hasConfirmedClassDKeys;	// 10 = 0xa
    _Bool _hasConfirmedClassCKeys;	// 11 = 0xb
    _Bool _hasConfirmedClassAKeys;	// 12 = 0xc
    _Bool _usesSPPLink;	// 13 = 0xd
    _Bool _wasInitiallySetupUsingIDSPairing;	// 14 = 0xe
    _Bool _lastSeenAlwaysOnWiFiSupported;	// 15 = 0xf
    _Bool _isEmptyPairing;	// 16 = 0x10
    _Bool _hasSavedClassCKeysInKeychain;	// 17 = 0x11
    _Bool _hasSavedClassAKeysInKeychain;	// 18 = 0x12
    unsigned short _lastSeenInnerLinkVersionHBO;	// 20 = 0x14
    NSUUID *_nrUUID;	// 24 = 0x18
    NSUUID *_bluetoothUUID;	// 32 = 0x20
    NRDLDKeys *_classDKeys;	// 40 = 0x28
    NRDLDKeys *_classCKeys;	// 48 = 0x30
    NSData *_receivedProxyNotifyPayload;	// 56 = 0x38
    NSData *_outOfBandKey;	// 64 = 0x40
    NSData *_bluetoothMACAddress;	// 72 = 0x48
    NSString *_lastSeenName;	// 80 = 0x50
    NSString *_lastSeenBuildVersion;	// 88 = 0x58
    long long _pairingProtocolVersion;	// 96 = 0x60
    NSDate *_dateCreated;	// 104 = 0x68
    NSDate *_dateRegistered;	// 112 = 0x70
    NSDate *_dateEnabled;	// 120 = 0x78
    NRDLDKeys *_classAKeys;	// 128 = 0x80
    NSData *_localInnerIPv6AddressBytesClassD;	// 136 = 0x88
    NSData *_remoteInnerIPv6AddressBytesClassD;	// 144 = 0x90
    NSData *_localInnerIPv6AddressBytesClassC;	// 152 = 0x98
    NSData *_remoteInnerIPv6AddressBytesClassC;	// 160 = 0xa0
}

+ (_Bool)updateRemoteClassCInnerAddressBytes:(struct in6_addr *)arg1 nrUUID:(id)arg2;	// IMP=0x00000001000b2d8c
+ (_Bool)updateRemoteClassDInnerAddressBytes:(struct in6_addr *)arg1 nrUUID:(id)arg2;	// IMP=0x00000001000b2a1c
+ (_Bool)updateLocalClassCInnerAddressBytes:(struct in6_addr *)arg1 nrUUID:(id)arg2;	// IMP=0x00000001000b26ac
+ (_Bool)updateLocalClassDInnerAddressBytes:(struct in6_addr *)arg1 nrUUID:(id)arg2;	// IMP=0x00000001000b233c
+ (void)writeSockAddrBytes:(struct sockaddr_in6 *)arg1 forEndpoint:(id)arg2;	// IMP=0x00000001000b1fa8
+ (id)createTerminusPrefixEndpoint;	// IMP=0x00000001000b1f08
+ (id)createNewRemoteClassDAddrData;	// IMP=0x00000001000b1e98
+ (id)createNewLocalClassDAddrData;	// IMP=0x00000001000b1e28
+ (id)createEndpointFromAddrData:(id)arg1 portString:(id)arg2;	// IMP=0x00000001000b1bcc
+ (void)updateReceivedProxyNotifyPayload:(id)arg1 nrUUID:(id)arg2;	// IMP=0x00000001000b1988
+ (void)updateLastSeenAlwaysOnWiFiSupported:(_Bool)arg1 nrUUID:(id)arg2;	// IMP=0x00000001000b17c8
+ (void)updateLastSeenBuildVersion:(id)arg1 nrUUID:(id)arg2;	// IMP=0x00000001000b1584
+ (void)updateLastSeenName:(id)arg1 nrUUID:(id)arg2;	// IMP=0x00000001000b1340
+ (void)updateLastSeenInnerLinkVersionHBO:(unsigned short)arg1 nrUUID:(id)arg2;	// IMP=0x00000001000b1184
+ (void)ingestRemoteClassAKeysEncryptedWithIDS:(id)arg1 nrUUID:(id)arg2 deviceCompletionBlock:(CDUnknownBlockType)arg3;	// IMP=0x00000001000b0e34
+ (void)ingestRemoteClassCKeysEncryptedWithIDS:(id)arg1 nrUUID:(id)arg2 deviceCompletionBlock:(CDUnknownBlockType)arg3;	// IMP=0x00000001000b0ae4
+ (void)ingestRemoteClassDKeysEncryptedWithIDS:(id)arg1 nrUUID:(id)arg2 deviceCompletionBlock:(CDUnknownBlockType)arg3;	// IMP=0x00000001000b0628
+ (void)ingestRemoteClassAKeys:(id)arg1 nrUUID:(id)arg2 deviceCompletionBlock:(CDUnknownBlockType)arg3;	// IMP=0x00000001000b02fc
+ (void)ingestRemoteClassCKeys:(id)arg1 nrUUID:(id)arg2 deviceCompletionBlock:(CDUnknownBlockType)arg3;	// IMP=0x00000001000affd0
+ (void)ingestRemoteClassDKeys:(id)arg1 nrUUID:(id)arg2 deviceCompletionBlock:(CDUnknownBlockType)arg3;	// IMP=0x00000001000af8ac
+ (void)queryPairingFromIDSKeysForNRUUID:(id)arg1 minDataProtectionClass:(unsigned char)arg2 completionBlock:(CDUnknownBlockType)arg3;	// IMP=0x00000001000af760
+ (void)queryPairingKeysForNRUUID:(id)arg1 minDataProtectionClass:(unsigned char)arg2 completionBlock:(CDUnknownBlockType)arg3;	// IMP=0x00000001000aeb14
+ (_Bool)hasEnabledSPPDevice;	// IMP=0x00000001000ae95c
+ (id)copySPPMACAddressForNRUUID:(id)arg1;	// IMP=0x00000001000ae8b4
+ (id)copyLocalDeviceForSPPMACAddress:(id)arg1;	// IMP=0x00000001000ae668
+ (_Bool)isEnabledSPPDeviceForMACAddress:(id)arg1;	// IMP=0x00000001000ae42c
+ (id)copyEnabledSPPBluetoothMACAddresses;	// IMP=0x00000001000ae23c
+ (id)copyEnabledSPPNRUUIDs;	// IMP=0x00000001000ae078
+ (id)copyBestTestingNRUUID;	// IMP=0x00000001000aded4
+ (_Bool)hasEnabledBluetoothDevice;	// IMP=0x00000001000add1c
+ (id)copyEnabledBluetoothUUIDs;	// IMP=0x00000001000adb2c
+ (id)copyEnabledAndCompletedPairingNRUUIDs;	// IMP=0x00000001000ad980
+ (id)copyEnabledNRUUIDs;	// IMP=0x00000001000ad7d4
+ (_Bool)hasEnabledDevice;	// IMP=0x00000001000ad648
+ (id)copyDeviceListString;	// IMP=0x00000001000ad44c
+ (void)disableDeviceWithNRUUID:(id)arg1 completionBlock:(CDUnknownBlockType)arg2;	// IMP=0x00000001000ad160
+ (void)enableDeviceWithNRUUID:(id)arg1 completionBlock:(CDUnknownBlockType)arg2;	// IMP=0x00000001000ace74
+ (void)unregisterAllDevicesWithCompletionBlock:(CDUnknownBlockType)arg1;	// IMP=0x00000001000acae4
+ (void)unregisterDeviceWithNRUUID:(id)arg1 completionBlock:(CDUnknownBlockType)arg2;	// IMP=0x00000001000ac61c
+ (void)reportRegistrationFailureCode:(long long)arg1 errorDescription:(id)arg2 forNRUUID:(id)arg3;	// IMP=0x00000001000ac180
+ (void)confirmKeysForClass:(unsigned char)arg1 nrUUID:(id)arg2;	// IMP=0x00000001000abb74
+ (void)registerDeviceWithNRUUID:(id)arg1 pairingProtocolVersion:(long long)arg2 wasInitiallySetupUsingIDSPairing:(_Bool)arg3 outOfBandKey:(id)arg4 pairWithSPPLink:(_Bool)arg5 bluetoothMACAddress:(id)arg6 completionBlock:(CDUnknownBlockType)arg7;	// IMP=0x00000001000ab3b0
+ (void)removeAnalyticsForNRUUID:(id)arg1;	// IMP=0x00000001000ab344
+ (id)getAnalyticsForNRUUID:(id)arg1;	// IMP=0x00000001000ab2e0
+ (void)addAnalyticsForNRUUID:(id)arg1 nrUUID:(id)arg2;	// IMP=0x00000001000ab250
+ (id)copyNRUUIDForBluetoothUUID:(id)arg1;	// IMP=0x00000001000ab1c4
+ (id)copyLocalDeviceForBluetoothUUID:(id)arg1;	// IMP=0x00000001000aae20
+ (id)copyLocalDeviceForNRUUID:(id)arg1 shouldCreate:(_Bool)arg2;	// IMP=0x00000001000aac70
+ (id)copyLocalDeviceForNRUUID:(id)arg1;	// IMP=0x00000001000aaba4
+ (id)newLocalDeviceWithRandomNRUUID;	// IMP=0x00000001000aaa60
+ (_Bool)supportsSecureCoding;	// IMP=0x00000001000aaa58
+ (id)copyStatusString;	// IMP=0x00000001000aa828
+ (void)saveAllDevicesToDiskWithClassA;	// IMP=0x00000001000aa7d8
+ (void)saveAllDevicesToDisk;	// IMP=0x00000001000aa230
+ (void)saveClassAKeysWithCompletion:(CDUnknownBlockType)arg1;	// IMP=0x00000001000a9ec4
+ (void)loadClassAKeys;	// IMP=0x00000001000a9be4
+ (void)initializeLocalDeviceDatabaseIfNecessary;	// IMP=0x00000001000a9550
- (void).cxx_destruct;	// IMP=0x00000001000a89d0
@property(retain, nonatomic) NSData *remoteInnerIPv6AddressBytesClassC; // @synthesize remoteInnerIPv6AddressBytesClassC=_remoteInnerIPv6AddressBytesClassC;
@property(retain, nonatomic) NSData *localInnerIPv6AddressBytesClassC; // @synthesize localInnerIPv6AddressBytesClassC=_localInnerIPv6AddressBytesClassC;
@property(retain, nonatomic) NSData *remoteInnerIPv6AddressBytesClassD; // @synthesize remoteInnerIPv6AddressBytesClassD=_remoteInnerIPv6AddressBytesClassD;
@property(retain, nonatomic) NSData *localInnerIPv6AddressBytesClassD; // @synthesize localInnerIPv6AddressBytesClassD=_localInnerIPv6AddressBytesClassD;
@property(nonatomic) _Bool hasSavedClassAKeysInKeychain; // @synthesize hasSavedClassAKeysInKeychain=_hasSavedClassAKeysInKeychain;
@property(nonatomic) _Bool hasSavedClassCKeysInKeychain; // @synthesize hasSavedClassCKeysInKeychain=_hasSavedClassCKeysInKeychain;
@property(retain, nonatomic) NRDLDKeys *classAKeys; // @synthesize classAKeys=_classAKeys;
@property(retain, nonatomic) NSDate *dateEnabled; // @synthesize dateEnabled=_dateEnabled;
@property(retain, nonatomic) NSDate *dateRegistered; // @synthesize dateRegistered=_dateRegistered;
@property(retain, nonatomic) NSDate *dateCreated; // @synthesize dateCreated=_dateCreated;
@property(nonatomic) long long pairingProtocolVersion; // @synthesize pairingProtocolVersion=_pairingProtocolVersion;
@property(nonatomic) _Bool isEmptyPairing; // @synthesize isEmptyPairing=_isEmptyPairing;
@property(nonatomic) _Bool lastSeenAlwaysOnWiFiSupported; // @synthesize lastSeenAlwaysOnWiFiSupported=_lastSeenAlwaysOnWiFiSupported;
@property(retain, nonatomic) NSString *lastSeenBuildVersion; // @synthesize lastSeenBuildVersion=_lastSeenBuildVersion;
@property(retain, nonatomic) NSString *lastSeenName; // @synthesize lastSeenName=_lastSeenName;
@property(nonatomic) unsigned short lastSeenInnerLinkVersionHBO; // @synthesize lastSeenInnerLinkVersionHBO=_lastSeenInnerLinkVersionHBO;
@property(nonatomic) _Bool wasInitiallySetupUsingIDSPairing; // @synthesize wasInitiallySetupUsingIDSPairing=_wasInitiallySetupUsingIDSPairing;
@property(retain, nonatomic) NSData *bluetoothMACAddress; // @synthesize bluetoothMACAddress=_bluetoothMACAddress;
@property(nonatomic) _Bool usesSPPLink; // @synthesize usesSPPLink=_usesSPPLink;
@property(retain, nonatomic) NSData *outOfBandKey; // @synthesize outOfBandKey=_outOfBandKey;
@property(retain, nonatomic) NSData *receivedProxyNotifyPayload; // @synthesize receivedProxyNotifyPayload=_receivedProxyNotifyPayload;
@property(nonatomic) _Bool hasConfirmedClassAKeys; // @synthesize hasConfirmedClassAKeys=_hasConfirmedClassAKeys;
@property(nonatomic) _Bool hasConfirmedClassCKeys; // @synthesize hasConfirmedClassCKeys=_hasConfirmedClassCKeys;
@property(nonatomic) _Bool hasConfirmedClassDKeys; // @synthesize hasConfirmedClassDKeys=_hasConfirmedClassDKeys;
@property(retain, nonatomic) NRDLDKeys *classCKeys; // @synthesize classCKeys=_classCKeys;
@property(retain, nonatomic) NRDLDKeys *classDKeys; // @synthesize classDKeys=_classDKeys;
@property(nonatomic) _Bool isEnabled; // @synthesize isEnabled=_isEnabled;
@property(nonatomic) _Bool isRegistered; // @synthesize isRegistered=_isRegistered;
@property(retain, nonatomic) NSUUID *bluetoothUUID; // @synthesize bluetoothUUID=_bluetoothUUID;
@property(retain, nonatomic) NSUUID *nrUUID; // @synthesize nrUUID=_nrUUID;
- (void)reportEvent:(int)arg1;	// IMP=0x00000001000a87a4
- (void)reportEvent:(int)arg1 detailsFormat:(id)arg2;	// IMP=0x00000001000a8710
- (void)reportEvent:(int)arg1 details:(id)arg2;	// IMP=0x00000001000a86a0
- (id)copyLocalInnerAddresses;	// IMP=0x00000001000a8564
- (id)copyLocalLinkLocalAddressString;	// IMP=0x00000001000a84fc
- (void)writeRemoteClassCInnerAddressBytes:(struct in6_addr *)arg1;	// IMP=0x00000001000a83d4
- (void)writeRemoteClassDInnerAddressBytes:(struct in6_addr *)arg1;	// IMP=0x00000001000a82ac
- (void)writeRemoteClassCInnerAddressSockAddrBytes:(struct sockaddr_in6 *)arg1;	// IMP=0x00000001000a8170
- (void)writeRemoteClassDInnerAddressSockAddrBytes:(struct sockaddr_in6 *)arg1;	// IMP=0x00000001000a8034
- (void)writeLocalClassCInnerAddressBytes:(struct in6_addr *)arg1;	// IMP=0x00000001000a7f0c
- (void)writeLocalClassDInnerAddressBytes:(struct in6_addr *)arg1;	// IMP=0x00000001000a7de4
- (id)copyLocalInnerEndpointLinkLocal;	// IMP=0x00000001000a7d64
- (void)writeLocalClassCInnerAddressSockAddrBytes:(struct sockaddr_in6 *)arg1;	// IMP=0x00000001000a7c28
- (void)writeLocalClassDInnerAddressSockAddrBytes:(struct sockaddr_in6 *)arg1;	// IMP=0x00000001000a7aec
- (id)copyRemoteAddressStrings;	// IMP=0x00000001000a7a14
- (id)copyRemoteClassCAddressString;	// IMP=0x00000001000a79ac
- (id)copyRemoteClassDAddressString;	// IMP=0x00000001000a7944
- (id)copyLocalClassCAddressString;	// IMP=0x00000001000a78dc
- (id)copyLocalClassDAddressString;	// IMP=0x00000001000a7874
- (id)copyRemoteClassCInnerEndpoint;	// IMP=0x00000001000a7830
- (id)copyRemoteClassDInnerEndpoint;	// IMP=0x00000001000a77ec
- (id)copyLocalClassCInnerEndpoint;	// IMP=0x00000001000a77a8
- (id)copyLocalClassDInnerEndpoint;	// IMP=0x00000001000a7764
- (id)copyRemoteClassCInnerEndpointWithPort:(id)arg1;	// IMP=0x00000001000a7574
- (id)copyRemoteClassDInnerEndpointWithPort:(id)arg1;	// IMP=0x00000001000a73b0
- (id)copyLocalClassCInnerEndpointWithPort:(id)arg1;	// IMP=0x00000001000a71c0
- (id)copyLocalClassDInnerEndpointWithPort:(id)arg1;	// IMP=0x00000001000a6ffc
- (_Bool)hasReceivedRemoteClassCInnerAddress;	// IMP=0x00000001000a6fb4
- (_Bool)hasReceivedRemoteClassDInnerAddress;	// IMP=0x00000001000a6f6c
- (void)encodeWithCoder:(id)arg1;	// IMP=0x00000001000a6988
- (id)initWithCoder:(id)arg1;	// IMP=0x00000001000a5ebc
- (id)copyWithZone:(struct _NSZone *)arg1;	// IMP=0x00000001000a56c0
- (id)copyLongDescription;	// IMP=0x00000001000a4630
- (id)description;	// IMP=0x00000001000a4410
- (id)initWithNRUUID:(id)arg1;	// IMP=0x00000001000a4254
- (void)fillInClassAKeysWithCompletion:(CDUnknownBlockType)arg1;	// IMP=0x00000001000a40b8
- (void)fillInClassCKeysWithCompletion:(CDUnknownBlockType)arg1;	// IMP=0x00000001000a3ef8
- (void)fillInKeysForCurrentlyUnlockedWithForceClassA:(_Bool)arg1;	// IMP=0x00000001000a3910
- (_Bool)fillInClassDKeys;	// IMP=0x00000001000a36cc
@property(readonly, nonatomic) _Bool hasOutOfBandKey;
- (id)copyKeys:(unsigned char)arg1;	// IMP=0x00000001000a3580
@property(readonly, nonatomic) _Bool isEnabledAndHasCompletedPairing;
@property(readonly, nonatomic) _Bool hasCompletedPairing;

@end

