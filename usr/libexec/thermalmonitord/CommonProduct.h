//
//     Generated by classdumpios 1.0.1 (64 bit) (iOS port by DreamDevLost)(Debug version compiled Jun 10 2020 10:03:13).
//
//  Copyright (C) 1997-2019 Steve Nygard.
//

#import <objc/NSObject.h>

#import "tGraphDataSource-Protocol.h"

@class AWDServerConnection, AggDThermalMonitor, ArcController, CameraTS, ContextualClampController, LifetimeServoController, NSArray, NSDictionary, NSMutableArray, NSUserDefaults, TableDrivenDecisionTree;
@protocol OS_dispatch_queue;

@interface CommonProduct : NSObject <tGraphDataSource>
{
    AggDThermalMonitor *aggdTM;	// 8 = 0x8
    _Bool thermalTrap;	// 16 = 0x10
    NSMutableArray *listofComponentControl;	// 24 = 0x18
    NSMutableArray *listOfSupervisorControl;	// 32 = 0x20
    int calibrationResistorSensor;	// 40 = 0x28
    int calibrationResistorTempDefault;	// 44 = 0x2c
    unsigned int requiredCalibrationResistorSamples;	// 48 = 0x30
    TableDrivenDecisionTree *decisionTree;	// 56 = 0x38
    int thermalState;	// 64 = 0x40
    unsigned long long componentThermalStatusLevel;	// 72 = 0x48
    unsigned long long previousOSThermalNotificationLevel;	// 80 = 0x50
    long long thermalPressureLevel;	// 88 = 0x58
    long long previousThermalPressureLevel;	// 96 = 0x60
    int moderatePressureToLevelVersion;	// 104 = 0x68
    CameraTS *camSensor;	// 112 = 0x70
    _Bool canForceThermalLevels;	// 120 = 0x78
    _Bool usesFastDieTempControl;	// 121 = 0x79
    _Bool suppressesTrapSubCountLogging;	// 122 = 0x7a
    _Bool needsAppleConnectThermalTrapLogging;	// 123 = 0x7b
    _Bool sendMaxTemp;	// 124 = 0x7c
    int _forcedThermalLevelLower;	// 128 = 0x80
    int _forcedThermalLevelUpper;	// 132 = 0x84
    LifetimeServoController *lifetimeServoController;	// 136 = 0x88
    ContextualClampController *contextualClampController;	// 144 = 0x90
    ArcController *_arcController;	// 152 = 0x98
    AWDServerConnection *awdConnection;	// 160 = 0xa0
    NSDictionary *simulatedThermalMitigationLimits;	// 168 = 0xa8
    NSDictionary *simulatedLowTempMitigationLimits;	// 176 = 0xb0
    NSArray *_maximumDieTempSensorIndexSet;	// 184 = 0xb8
    NSArray *_averageDieTempSensorIndexSet;	// 192 = 0xc0
    NSArray *_filteredAverageDieTempSensorIndexSet;	// 200 = 0xc8
    int _totalSensorCount;	// 208 = 0xd0
    int _powerSensorCount;	// 212 = 0xd4
    unsigned long long _PMUtcalAdjustMask;	// 216 = 0xd8
    _Bool _reducedRateModeActive;	// 224 = 0xe0
    _Bool _skipRegularAggdCountUpdate;	// 225 = 0xe1
    _Bool _isBackLightOn;	// 226 = 0xe2
    _Bool _isCPMSMitigationEnabled;	// 227 = 0xe3
    int _displayToken;	// 228 = 0xe4
    int _chargerToken;	// 232 = 0xe8
    int _chargerState;	// 236 = 0xec
    NSObject<OS_dispatch_queue> *_thermalQueue;	// 240 = 0xf0
    NSUserDefaults *_defaults;	// 248 = 0xf8
}

@property(nonatomic) _Bool isCPMSMitigationEnabled; // @synthesize isCPMSMitigationEnabled=_isCPMSMitigationEnabled;
@property(retain, nonatomic) NSUserDefaults *defaults; // @synthesize defaults=_defaults;
@property(readonly, nonatomic) long long thermalPressureLevel; // @synthesize thermalPressureLevel;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *thermalQueue; // @synthesize thermalQueue=_thermalQueue;
@property(nonatomic) int chargerState; // @synthesize chargerState=_chargerState;
@property(nonatomic) int chargerToken; // @synthesize chargerToken=_chargerToken;
@property(nonatomic) int displayToken; // @synthesize displayToken=_displayToken;
@property(nonatomic) _Bool isBackLightOn; // @synthesize isBackLightOn=_isBackLightOn;
@property(nonatomic) int thermalState; // @synthesize thermalState;
@property(readonly, nonatomic) NSMutableArray *listOfSupervisorControl; // @synthesize listOfSupervisorControl;
@property(readonly, nonatomic) NSMutableArray *listofComponentControl; // @synthesize listofComponentControl;
@property(nonatomic) unsigned long long componentThermalStatusLevel; // @synthesize componentThermalStatusLevel;
@property(readonly, nonatomic) unsigned int requiredCalibrationResistorSamples; // @synthesize requiredCalibrationResistorSamples;
@property(readonly, nonatomic) int calibrationResistorTempDefault; // @synthesize calibrationResistorTempDefault;
@property(readonly, nonatomic) int calibrationResistorSensor; // @synthesize calibrationResistorSensor;
- (struct __CFString *)copyFieldCurrentValueForIndex:(int)arg1;	// IMP=0x00000001000373bc
- (struct __CFString *)copyHeaderForIndex:(int)arg1;	// IMP=0x0000000100037340
- (int)numberOfFields;	// IMP=0x0000000100037338
- (void)canaryModeExitEarly:(int)arg1;	// IMP=0x0000000100037334
- (int)canaryTempThreshold;	// IMP=0x000000010003732c
- (int)canaryTempSensorIndex;	// IMP=0x0000000100037324
- (int)desiredLoopInterval;	// IMP=0x0000000100037318
- (void)suppressStandardBehaviors;	// IMP=0x0000000100037314
- (_Bool)shouldSuppressStandardBehaviors:(struct __CFDictionary *)arg1;	// IMP=0x0000000100037010
- (_Bool)canSystemSleep;	// IMP=0x0000000100037008
- (void)updateSystemPowerState:(_Bool)arg1;	// IMP=0x0000000100036f98
- (void)replaceOrAppendHotspotEntry:(struct __CFDictionary *)arg1 existingHotspots:(struct __CFArray *)arg2;	// IMP=0x0000000100036eb8
- (struct __CFArray *)copyHotspotsArray:(id)arg1;	// IMP=0x0000000100036e74
- (int)sensorIndexFromList:(struct __CFArray *)arg1 fourCharCode:(struct __CFString *)arg2;	// IMP=0x0000000100036ddc
- (int)getModeratePressureVersion;	// IMP=0x0000000100036dd4
- (_Bool)getPotentialForcedThermalPressureLevel;	// IMP=0x0000000100036cb4
- (unsigned long long)getPotentialForcedThermalLevel:(unsigned long long)arg1;	// IMP=0x0000000100036b38
- (_Bool)useTcalAdjust:(unsigned int)arg1;	// IMP=0x0000000100036b20
- (void)updateTrapTargetFor:(int)arg1:(unsigned int)arg2;	// IMP=0x0000000100036ad0
- (void)updateSleepTargetFor:(int)arg1:(unsigned int)arg2;	// IMP=0x0000000100036a80
- (void)updateMaxLIFor:(int)arg1:(unsigned int)arg2;	// IMP=0x0000000100036a00
- (void)removeHotspotTargetOverrides;	// IMP=0x00000001000368fc
- (void)updateHotSpotPIDTargetFor:(int)arg1:(unsigned int)arg2;	// IMP=0x00000001000368bc
- (void)updateControlEffortFor:(int)arg1:(unsigned int)arg2;	// IMP=0x00000001000367fc
- (void)overrideArcParam:(id)arg1 value:(int)arg2;	// IMP=0x00000001000367ec
- (int)arcVirtualTemperature;	// IMP=0x00000001000367e4
- (int)arcModuleTemperature;	// IMP=0x00000001000367dc
- (int)gasGaugeBatteryTemperature;	// IMP=0x00000001000367d4
- (int)thermalSensorValuesMaxFromIndexSet:(id)arg1;	// IMP=0x000000010003669c
- (int)dieTempFilteredMaxAverage;	// IMP=0x0000000100036680
- (int)dieTempMaxAverage;	// IMP=0x0000000100036670
- (int)dieTempMaxMax;	// IMP=0x0000000100036660
- (void)updateContextualClamp;	// IMP=0x0000000100036648
- (void)overrideLifetimeServoParam:(id)arg1 value:(int)arg2;	// IMP=0x0000000100036630
- (void)updateLifetimeServo;	// IMP=0x00000001000365c0
- (void)updateCoreAnalyticsInfo;	// IMP=0x00000001000365bc
- (void)updateAggdInfo;	// IMP=0x00000001000365b8
- (id)getGridY;	// IMP=0x0000000100036574
- (id)getGridX;	// IMP=0x0000000100036530
- (void)setup2DGridDisplayDriver;	// IMP=0x000000010003652c
- (void)send2DGridTempsToDisplayDriver:(int *)arg1;	// IMP=0x0000000100036528
- (void)sendMaxTempToDisplayDriver:(int)arg1;	// IMP=0x0000000100036524
- (void)updateDisplayDriver:(_Bool)arg1;	// IMP=0x0000000100036520
- (int)getFrontDisplayCenterTemperature;	// IMP=0x0000000100036518
- (void)updatePowerzoneTelemetry;	// IMP=0x00000001000364ec
- (int)computeMaxCGTemp;	// IMP=0x00000001000364a8
- (int *)compute2DGridTemps;	// IMP=0x0000000100036464
- (void)updateAllThermalLoad:(_Bool)arg1;	// IMP=0x0000000100036424
- (void)tryTakeAction;	// IMP=0x00000001000362e4
- (int)powerSensors;	// IMP=0x00000001000362dc
- (int)totalSensors;	// IMP=0x00000001000362d4
- (void)probeAllSupervisorControlLoadingIndex;	// IMP=0x000000010003629c
- (_Bool)isInternalInstall;	// IMP=0x0000000100036238
- (int)maxControlEffort;	// IMP=0x0000000100036114
- (unsigned long long)getMaxSensorValue;	// IMP=0x0000000100035fbc
- (int)getHighestSkinTemp;	// IMP=0x0000000100035e98
- (struct iir_filter_t *)getFilterValues;	// IMP=0x0000000100035e6c
- (_Bool)isSendingMaxTempToDisplayDriverEnabled;	// IMP=0x0000000100035e64
- (void)enableSendingMaxTempToDisplayDriver;	// IMP=0x0000000100035e58
- (id)newBacklightComponentController:(struct __CFDictionary *)arg1;	// IMP=0x0000000100035e24
- (int)getCurrentMaxLIForComponent:(unsigned int)arg1;	// IMP=0x0000000100035e00
- (void)getAllComponentID:(struct __SCPreferences *)arg1;	// IMP=0x0000000100035bf8
- (id)findComponent:(int)arg1;	// IMP=0x0000000100035a28
- (void)logTrapEntryForAC:(id)arg1;	// IMP=0x00000001000359bc
- (void)evaluteMitigationMaxLoadingIndex;	// IMP=0x0000000100035778
- (void)createConnectionToCT;	// IMP=0x0000000100035750
- (void)clearLoadingIndexOverrides;	// IMP=0x0000000100035648
- (void)clearControlEffortOverrides;	// IMP=0x000000010003549c
- (void)registerChargerNotification;	// IMP=0x0000000100035260
- (void)registerDisplayNotification;	// IMP=0x000000010003513c
- (void)pushChargerTypeToAWD:(int)arg1;	// IMP=0x00000001000350dc
- (int)getChargerState;	// IMP=0x00000001000350d4
- (_Bool)mitigationsFullyReleased;	// IMP=0x0000000100034fbc
- (_Bool)fourCharCodeNeedsPMUtcal:(struct __CFString *)arg1;	// IMP=0x0000000100034f08
- (_Bool)fourCharCodeMatchesDieTempType:(BOOL)arg1 fourCharCode:(struct __CFString *)arg2;	// IMP=0x0000000100034e2c
- (id)copyDieTempSensorIndexSetForFourthChar:(BOOL)arg1 sensors:(struct __CFArray *)arg2;	// IMP=0x0000000100034cf4
- (void)dealloc;	// IMP=0x0000000100034c60
- (void)putDeviceInLowTempSimulationMode:(id)arg1;	// IMP=0x0000000100034a44
- (void)putDeviceInThermalSimulationMode:(id)arg1;	// IMP=0x00000001000347ec
- (void)thermalUpdatesToWatchdogEnabled:(id)arg1;	// IMP=0x00000001000346a8
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;	// IMP=0x0000000100034524
- (void)setHiPFeatureEnabled:(_Bool)arg1;	// IMP=0x0000000100034514
- (void)removeLightPressureOverride;	// IMP=0x00000001000344f8
- (void)simulateLightThermalPressure;	// IMP=0x00000001000344b0
- (void)registerDefaultsDomain;	// IMP=0x0000000100034400
- (id)initProduct:(id)arg1;	// IMP=0x0000000100032f38

@end

